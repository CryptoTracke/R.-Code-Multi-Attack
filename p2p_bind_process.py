def bind_process(ip_host=str,listen_c=int,reverse_p=False):
    try:
        if reverse_p == False:
            Socket_B = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            Socket_B.setblocking(1)
            Socket_B.bind((ip_host,0))
            possible_port_mine(Socket_B)
            Socket_B.listen(listen_c)
            print("\n")
            print("SESSION HAS BEEN CREATED")
            print("\n")
            get_info_mine()
            Result_Port = tcp_or_udp_check(Possible_Port_Connect)
            print('YOUR IP ADDRESS: ',Get_My_IP)
            print('YOUR CONNECTION DEVICE: ',Get_My_Host)
            print('YOUR PORT TO CONNECT: ',Possible_Port_Connect)
            print('PORT INFORMATION: ',Result_Port)
            print("\n")
            time.sleep(1.2)
            recv_f_size = 1024
            cur_dir_name = os.getcwd()
            process_id = os.getpid()
            print("YOUR CURRENT DIRECTORY: ",cur_dir_name)
            print("YOUR PROCESS ID: ",process_id)
            time.sleep(1.2)
            print("\n")
            save_to_name = str(input("[TYPE] YOUR NEW FILE NAME: "))
            print("\n")
            print("PLEASE WAIT FOR CONNECTION")
            print("\n")
            while True:
                conn_c,add_c = Socket_B.accept()
                print(f"USER HAS BEEN CONNECTED - INFO: {add_c}")
                time.sleep(1.2)
                get_user_input_format = conn_c.recv(recv_f_size).decode()
                get_user_input_format = str(get_user_input_format).upper().replace(" ","")
                print("YOU GOT RESPONSE FROM CONNECTION")
                print("YOU WILL GET THIS FORMAT: ",get_user_input_format)
                print("\n")
                time.sleep(1.2)
                if get_user_input_format == "PDF":
                    bt_read = conn_c.recv(recv_f_size).decode()
                    reading_url_pdf(bt_read,save_to_name)
                    conn_c.close()
                    Socket_B.close()
                    break
                elif get_user_input_format == "TXT":
                    f_read = open(f"{save_to_name}.txt","w")
                    bt_read = conn_c.recv(recv_f_size).decode()
                    print("RECEIVED")
                    time.sleep(1.2)
                    reading_q = str(input("YOU WANT TO SEE YOUR MESSAGE ON THE CONSOLE [Y/N]: ")).upper().replace(" ","")
                    print("\n")
                    time.sleep(1.2)
                    if reading_q == "Y":
                        print(bt_read)
                        print("\n")
                        if not bt_read:
                            print("EMPTY FILE, CHECK YOUR CONNECTION OR PROCESS")
                            print("\n")
                            time.sleep(0.8)
                            break
                        f_read.write(bt_read)
                        print("PROCESS HAS BEEN DONE SUCCESSFULLY, CHECK YOUR FILE")
                        print("\n")
                        f_read.close()
                        conn_c.close()
                        Socket_B.close()
                        time.sleep(0.8)
                        break
                    else:
                        if not bt_read:
                            print("EMPTY FILE, CHECK YOUR CONNECTION OR PROCESS")
                            print("\n")
                            break
                        f_read.write(bt_read)
                        print("PROCESS HAS BEEN DONE SUCCESSFULLY, CHECK YOUR FILE")
                        print("\n")
                        f_read.close()
                        conn_c.close()
                        Socket_B.close()
                        time.sleep(0.8)
                        break   
                else:
                    conn_c.close()
                    Socket_B.close()
                    time.sleep(0.8)
                    break
        elif reverse_p == True:
            Socket_B = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            Socket_B.setblocking(1)
            Socket_B.bind((ip_host,0))
            possible_port_mine(Socket_B)
            Socket_B.listen(listen_c)
            print("\n")
            print("SESSION HAS BEEN CREATED")
            print("\n")
            get_info_mine()
            Result_Port = tcp_or_udp_check(Possible_Port_Connect)
            print('YOUR IP ADDRESS: ',Get_My_IP)
            print('YOUR CONNECTION DEVICE: ',Get_My_Host)
            print('YOUR PORT TO CONNECT: ',Possible_Port_Connect)
            print('PORT INFORMATION: ',Result_Port)
            print("\n")
            time.sleep(1.2)
            recv_f_size = 1024
            cur_dir_name = os.getcwd()
            process_id = os.getpid()
            print("YOUR CURRENT DIRECTORY: ",cur_dir_name)
            print("YOUR PROCESS ID: ",process_id)
            time.sleep(1.2)
            print("\n")
            print("PLEASE WAIT FOR CONNECTION")
            print("\n")
            while True:
                conn_c,add_c = Socket_B.accept()
                print(conn_c.recv(recv_f_size).decode() + " HAS BEEN STARTED")
                time.sleep(0.8)
                print("\n")
                command_type = str(input("TYPE YOUR COMMAND TO SEND: "))
                print("\n")
                conn_c.send(command_type.encode())
                print(conn_c.recv(recv_f_size).decode())
                print("\n")
                time.sleep(1.5)
                print("PROCESS HAS BEEN DONE SUCCESSFULLY")
                print("\n")
                conn_c.close()
                Socket_B.close()
                time.sleep(0.8)
                break
    except:
        print("SOMETHING IS WRONG, PLEASE CHECK YOUR INTERNET CONNECTION AND PARAMETERS")
        print("\n")
        time.sleep(0.8)
        pass
